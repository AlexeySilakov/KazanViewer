function varargout = fittingbox(varargin)
% FittingBox Application M-file for fittingbox.fig
%    Intended to use only with 'kazan' viewer

% KAZAN dataviewer with plugins By Boris Epel & Alexey Silakov
% MPI of Bioinorganic Chemistry, Muelhaim an der Ruhr, 2003
% Free for non-commercial use. Use the program at your own risk. 
% The authors retains all rights. 
% Contact: epel@mpi-muelheim.mpg.de

% Last Modified by GUIDE v2.0 05-Jul-2004 09:16:27
% Silakov Alexey
% AlSi 13.03.2004, 15:00

if nargin == 0  % LAUNCH GUI
    token = 'FITTINGBOX_open';
    oldfig = getappdata(0, token);
    oldfig = oldfig(ishandle(oldfig));
    
    [fpath,n,e,v] = fileparts(which('kazan'));
    inifilename = [fpath '\kazan.ini'];
    ini = inimanaging(inifilename);
    opc = 2;
    try opc = ini.KazanViewer.MultyKazan; end
    if (opc == 1| opc == 2) & ~isempty(oldfig), set(oldfig(1),'Visible','on'); varargout{1}=oldfig(1); return; end

	fig = openfig(mfilename,'new');
    setappdata(0, token, [oldfig, fig]);
    
    % Generate a structure of handles to pass to callbacks, and store it. 
    handles = guihandles(fig);
    handles.hh = 0;
    handles.ploter = 0;
    handles.num = 1;
    handles.div = 0;
    handles.Data = [];
    handles.Script{1} = get(handles.list, 'String');
    handles.sim.y = [];
    handles.loadtype = 'onebyone'; % or 'allinone'
    handles.Color =   [1, 0, 0;...
            1, 1, 0;...
            0, 1, 0;...
            0, 0, 0;...
            1, 0, 1;...
            0, 1, 1;...
            1, 1, 0];
    handles.process = 1;
    handles.range.pnts = [];
    handles.range.bracket = [];
    handles.range.showbnds = 0;
    
    %   set(handles.butCol, 'BackgroundColor', handles.Color(1, :));
    guidata(fig, handles);
    list_Callback([], [], handles);
    
    if nargout > 0
        varargout{1} = fig;
    end
    
elseif ischar(varargin{1}) % INVOKE NAMED SUBFUNCTION OR CALLBACK
    
    try
        %     [varargout{1:nargout}] = 
        feval(varargin{:}); % FEVAL switchyard
    catch
        disp(lasterr);
    end
    
end


%| ABOUT CALLBACKS:
%| GUIDE automatically appends subfunction prototypes to this file, and 
%| sets objects' callback properties to call them through the FEVAL 
%| switchyard above. This comment describes that mechanism.
%|
%| Each callback subfunction declaration has the following form:
%| <SUBFUNCTION_NAME>(H, EVENTDATA, HANDLES, VARARGIN)
%|
%| The subfunction name is composed using the object's Tag and the 
%| callback type separated by '_', e.g. 'slider2_Callback',
%| 'figure1_CloseRequestFcn', 'axis1_ButtondownFcn'.
%|
%| H is the callback object's handle (obtained using GCBO).
%|
%| EVENTDATA is empty, but reserved for future use.
%|
%| HANDLES is a structure containing handles of components in GUI using
%| tags as fieldnames, e.g. handles.figure1, handles.slider2. This
%| structure is created at GUI startup using GUIHANDLES and stored in
%| the figure's application data using GUIDATA. A copy of the structure
%| is passed to each callback.  You can store additional information in
%| this structure at GUI startup, and you can change the structure
%| during callbacks.  Call guidata(h, handles) after changing your
%| copy to replace the stored original so that subsequent callbacks see
%| the updates. Type "help guihandles" and "help guidata" for more
%| information.
%|
%| VARARGIN contains any extra arguments you have passed to the
%| callback. Specify the extra arguments by editing the callback
%| property in the inspector. By default, GUIDE sets the property to:
%| <MFILENAME>('<SUBFUNCTION_NAME>', gcbo, [], guidata(gcbo))
%| Add any extra arguments after the last argument, before the final
%| closing parenthesis.
% --------------------------------------------------------------------
function varargout = figure1_DeleteFcn(h, eventdata, handles, varargin)
[path,name,ext,ver] = fileparts(get(handles.hh, 'FileName'));
eval([name '(''DeletePlugins'', handles.figure1, handles.hh)']);

% --------------------------------------------------------------------
function varargout = figure1_CloseRequestFcn(h, eventdata, handles, varargin)
delete(handles.figure1);

% --------------------------------------------------------------------
function FileUpdate(varargin);
return;
% --------------------------------------------------------------------
function varargout = list_Callback(h, eventdata, handles, varargin)
% % Stub for Callback of the uicontrol handles.listbox1.
Res = get(handles.list, 'String');
val = get(handles.list, 'Value');

[name, str1] = strtok(Res{val}, '=');
str2 = [trim(str1(2:end)), ' '];

if strcmp(trim(name), 'f')
    set(handles.ePars, 'String', str2);
    set(handles.ePars, 'UserData', 'function');
elseif str2(1)==''''
    primes = findstr(str2, '''');
    if size(primes, 2) < 2, primes(2) = size(str2, 2); end
    set(handles.ePars, 'String', str2(2:(primes(2)-1)));
    set(handles.ePars, 'UserData', 'string');
else
    dig = str2num(str2);
    set(handles.ePars, 'String', num2str(dig, 6));
    set(handles.ePars, 'UserData', 'value');
end

str = get(handles.popup, 'String');
if length(Res{val}) > 6,
    if strcmp(Res{val}(1:6), 'FitRng'),
        zoo = strcmp(str, '1');
        set(handles.popup, 'Value', find(zoo));
    end
end
% --------------------------------------------------------------------
function varargout = butLoadData_Callback(h, eventdata, handles, varargin)
hand = guidata(handles.hh);
if isempty(hand),  
    msgbox('Can not find main box handles', 'Error');
    return;
end
[path,name,ext,ver] = fileparts(hand.fname);
file_str = name;
sizey = size(hand.src.y, 2);
if sizey==1
    button = 'All in One';
else
    button = questdlg('How to load?',...
    '???','One by One','All in One','Cancel','One by One');        
end
popString = {};
switch button
    case 'One by One'
        if sizey > 10, 
            button = questdlg('Do you realy want to load data one by one?',...
                ['there are ' num2str(sizey), ' columns'],...
                'Oh, ja ja','Nie','Nie');
            if strcmp(button, 'Nie'), return; end
        end
        handles.loadtype = 'onebyone';
        for i = 1:sizey
            handles.Script{i} = get(handles.list, 'String');
            popString{end+1} = [file_str, '_col_ ', num2str(i)];
        end
    case 'All in One'
        handles.loadtype = 'allinone';
        handles.Script{1} = get(handles.list, 'String');
        popString = {file_str};
    otherwise
        return;
end
handles.sim.y = hand.src.y*0;
handles.src = hand.src;
% if ~isfield(handles, 'range'),
%     switch hand.Prj
%         case 'X'
%             handles.range.pnts = [1:size(hand.src.y, 1)];
%             handles.range.barcket = [1, size(hand.src.y, 1)];
%         case 'Y'
%             handles.range.pnts = [1:size(hand.src.y, 2)];
%             handles.range.barcket = [1, size(hand.src.y, 2)];
%     end
% end

set(handles.popSel, 'String', popString, 'Value', 1);
set(handles.list, 'String', handles.Script{1}, 'Value', 1);
guidata(handles.figure1, handles);

% --------------------------------------------------------------------
function varargout = ePars_Callback(h, eventdata, handles, varargin)
% % Stub for Callback of the uicontrol handles.ePars.
Res = get(handles.list, 'String');
val = get(handles.list, 'Value');
newval = trim(get(handles.ePars, 'String'));

[name, str1] = strtok(Res{val}, '=');
name = trim(name);

switch get(handles.ePars, 'UserData')
    case 'function'
        set(handles.ePars, 'String', newval);
        
        tokens = kv_autofit([name ' = ' newval]);
        
        %%%%%%%%%%%%% load script %%%%%%%%%%%%%%%%%%%%%%
        for k=1:size(Res,1),
            if ~strcmp(trim(strtok(Res{k},'=')),'f')
                try,eval([Res{k} ';']);end
            end
        end
        tempcell = Res;
        Res = {[name ' = ' newval]};
        %%%% find strings with additional parameters %%%
        for count = 1:length(tempcell)
            if length(tempcell{count})>6,
                if strcmp(tempcell{count}(1:6), 'FitRng')
                    Res{end+1} = tempcell{count};
                end
            end
        end        
        for k = 1: size(tokens, 2)
            try, var = eval(tokens{k}); catch, var = 0; end
            Res{end+1} = [tokens{k},' = ', num2str(var)];
        end

        clear tempcell;
    case 'string'
        set(handles.ePars, 'string', newval);
        Res{val} = [name ' = ''', newval,''''];
    otherwise
        nums = str2num(newval);
        set(handles.ePars, 'String', num2str(nums));
        Res{val} = [name ' = ' num2str(nums)];
end
set(handles.list, 'String', Res);
list_Callback(h, eventdata, handles);
switch handles.loadtype
    case 'onebyone', 
        handles.Script{get(handles.popSel, 'Value')} = Res;
    case 'allinone'
        handles.Script{1} = Res;
end
guidata(handles.figure1, handles);
hand = guidata(handles.hh);

if strcmp(get(handles.ePars, 'UserData'), 'value'),
    evallist(handles);
end

%--------------------------------------------------------------------
function varargout = slPars_Callback(h, eventdata, handles, varargin)
parname = get(handles.list, 'String');
parval = get(handles.list, 'Value');
if ~strcmp(get(handles.ePars, 'UserData'),'value'), return; end;

str = get(handles.popup, 'String');

shift = get(handles.slPars, 'Value');
num = get(handles.popup, 'Value');
if (length(parname{parval}) > 6)&(~strcmp(str(num), '1')),
    if strcmp(parname{parval}(1:6), 'FitRng'),
        zoo = strcmp(str, '1');
        set(handles.popup, 'Value', find(zoo));
    end
end
dim = str2num([str{num}]);

CurVal = str2double(get(handles.ePars, 'String'));
Val = CurVal + dim*(shift - 0.5)*2;

if (length(parname{parval}) > 6),
    if strcmp(parname{parval}(1:6), 'FitRng'),
           Val = floor(Val);
           if Val <1, Val = 1; end
    end
end
set(handles.ePars, 'String', num2str(Val));
ePars_Callback(h, eventdata, handles, varargin);

%--------------------------------------------------------------------
function plothis(handles)
handles = guidata(handles.figure1);
colors = handles.Color;

hand = guidata(handles.hh);
ax = handles.src.ax;
y = handles.src.y;

[prj, selec] = getslider_kazan(hand);
hand.out = {};
% ax = hand.src.ax;
% y = hand.src.y;

if handles.process, [y, ax] = processing(y, ax);
else
    ax.diff = '';
    ax.filt = '';
end
% Data
hand.out{1}.ax = ax;
hand.out{1}.ax.Color = [1 1 1]*0.4; % always gray ?
hand.out{1}.ax.s = 0;
hand.out{1}.y = y;
hand.out{1}.title = 'Src';

if handles.range.bracket,
    FitRng = handles.range.bracket;
    
    Dy = (max(max(real(y))) - min(min(real(y))))/50; 
    eval(['axxx = ax.', lower(prj), ';']);
    for count = 1:size(FitRng, 1)  
        hand.out{end+1}.ax = ax;
        
        if FitRng(count, 1) >length(axxx), FitRng(count, 1) = length(axxx); end
        if FitRng(count, 2) >length(axxx), FitRng(count, 2) = length(axxx); end
        %%%%%%%%%%%%%% Data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        eval(['hand.out{end}.ax.', lower(prj),' = ax.', lower(prj),...
                '([FitRng(count, 1):FitRng(count, 2)], 1);']);
        hand.out{end}.ax.Color = [0, 0, 1]; % always blue ?
        hand.out{end}.ax.s = 0;
        hand.out{end}.title = ['Src', num2str(count)];
        
        switch prj
            case 'X'
                hand.out{end}.y = y([FitRng(count, 1):FitRng(count, 2)], :);                
            case 'Y'
                hand.out{end}.y = y(:, [FitRng(count, 1):FitRng(count, 2)]);
        end
        if handles.range.showbnds,
            %%%%%%%%%%%%%% Bra... %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            hand.out{end+1}.ax = ax;
            eval(['hand.out{end}.ax.', lower(prj),' = ax.', lower(prj),...
                    '(FitRng(count, [1, 1]), 1);']);
            hand.out{end}.ax.Color = 'b';
            hand.out{end}.ax.s = 0;
            hand.out{end}.title = ['br_', num2str(count)];
            
            switch prj
                case 'X'
                    hand.out{end}.y(1, :) = y(FitRng(count, 1), :) - Dy;
                    hand.out{end}.y(2, :) = y(FitRng(count, 1), :) + Dy;
                case 'Y'
                    hand.out{end}.y(:, 1) = y(:, FitRng(count, 1)) - Dy;
                    hand.out{end}.y(:, 2) = y(:, FitRng(count, 1)) + Dy;
            end        
            %%%%%%%%%%%%%% cket... %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            hand.out{end+1}.ax = ax;
            eval(['hand.out{end}.ax.', lower(prj),' = ax.', lower(prj),...
                    '(FitRng(count, [2, 2]), 1);']);
            hand.out{end}.ax.Color = 'b';
            hand.out{end}.ax.s = 0;
            hand.out{end}.title = ['er_', num2str(count)];
            
            switch prj
                case 'X'
                    hand.out{end}.y(1, :) = y(FitRng(count, 2), :) - Dy;
                    hand.out{end}.y(2, :) = y(FitRng(count, 2), :) + Dy;
                case 'Y'
                    hand.out{end}.y(:, 1) = y(:, FitRng(count, 2)) - Dy;
                    hand.out{end}.y(:, 2) = y(:, FitRng(count, 2)) + Dy;
            end   
        end
    end
else
    hand.out{1}.ax.Color = 'b'; 
end

% Result
hand.out{end + 1}.ax = ax;
hand.out{end}.y = handles.sim.y;
hand.out{end}.ax.Color = 'r';
hand.out{end}.ax.s = 0;
hand.out{end}.title = 'Out';

states = {'off', 'on'};
st = get(handles.mSimDif, 'Checked');
check = find(strcmp(states, st)) -1;
% Data - result
if check, 
    hand.out{end+1}.ax = ax;
    hand.out{end}.y = y - handles.sim.y;
    hand.out{end}.ax.Color = 'g';
    hand.out{end}.ax.s = 0;
    hand.out{end}.title = 'Diff';
end

guidata(handles.hh, hand);
[fpath,name,ext,ver] = fileparts(get(handles.hh, 'FileName'));
eval([name '(''SetDataSource'', 2, hand)']);

% ------------------------------------------------------------
function butCol_Callback(hObject, eventdata, handles)
num = get(handles.popSel, 'Value');
c = uisetcolor(handles.Color(num, :));
if size(c, 2) > 1
  
  handles.Color(num, :) = c;
  set(handles.butCol, 'BackgroundColor', c, 'ForegroundColor', [1 1 1] - c);
  guidata(handles.figure1, handles);
  plothis(handles);
end


% % ------------------------------------------------------------
function popSel_Callback(hObject, eventdata, handles)
num = get(handles.popSel, 'Value');
if strcmp(handles.loadtype, 'onebyone'),
    %%%%%%% refresh range parameters %%%%%%%%%
    list = handles.Script{num};
    FitRng = handles.range.bracket;
    cc = 0;
    for count = 1:length(list),
        if length(list{count})>6,
            if strcmp(list{count}(1:6), 'FitRng'),
                cc = count;
%                 break;
            end
        end
    end
    nn = length(list) - cc;
    if cc,
        script{1} = list{1}; % NOTE: for cells, if you want to write something like this
        % you have to use '(', NOT '{', ;-/
        script{end+1} = ['FitRng(1, 1) = ', num2str(FitRng(1, 1))];
        script{end+1} = ['FitRng(1, 2) = ', num2str(FitRng(1, 2))];        
        if size(FitRng, 1)>1,        
            for i = 2:size(FitRng, 1)
                script{end+1} = ['FitRng(end+1, 1) = ', num2str(FitRng(i, 1))];
                script{end+1} = ['FitRng(end, 2) = ', num2str(FitRng(i, 2))];        
            end    
        end
        for i = 1:nn
            script{end+1} = list{i+cc};
        end
    elseif ~isempty(handles.range.pnts),
        script{1} = list{1}; % NOTE: for cells, if you want to write something like this
        % you have to use '(', NOT '{', ;-/
        script{end+1} = ['FitRng(1, 1) = ', num2str(FitRng(1, 1))];
        script{end+1} = ['FitRng(1, 2) = ', num2str(FitRng(1, 2))];        
        if size(FitRng, 1)>1,        
            for i = 2:size(FitRng, 1)
                script{end+1} = ['FitRng(end+1, 1) = ', num2str(FitRng(i, 1))];
                script{end+1} = ['FitRng(end, 2) = ', num2str(FitRng(i, 2))];        
            end    
        end
        for i = 0:nn-1
            script{end+1} = list{i+cc};
        end
    else
        script = list;
    end
    %%%%%%%%%%%%%%%%%%%%%
    set(handles.list, 'String', script, 'Value', 1);
    
    hand = guidata(handles.hh);
    num = get(handles.popSel, 'Value');
    
    set(hand.sl2Dplot, 'Value', num);
    kazan('sl2Dplot_Callback',hand.sl2Dplot,[],hand);
else
    set(handles.list, 'String', handles.Script{num}, 'Value', 1);
end
list_Callback(handles.list, eventdata, handles);

% set(handles.butCol, 'BackgroundColor', handles.Color(num, :)); 

% --------------------------------------------------------------------
function varargout = nearme(X, xi)
% nearme(X, xi)
% k = nearme(X, xi)
% [k, v] = nearme(X, xi)
% 
%   return value (v) and index (k) 
%   of nearest to xi number of array X 

[c, k] = min(abs(X - ones(size(X))*xi));
v = X(k);
switch nargout 
    case 0
        varargout{1} = k;
    case 1
        varargout{1} = k;
    case 2
        varargout{1} = k;
        varargout{2} = v; 
end
%--------------------------------------------------------------------

function butFitt_Callback(h, eventdata, handles)
hand = guidata(handles.hh);
sliderval = get(hand.sl2Dplot, 'Value');

[prj, selec, trans] = getslider_kazan(hand);

if ~isfield(handles,'src'), error('Please load your data!'); end

eval(['x  = handles.src.ax.', lower(prj), ';']);
eval(['y = handles.src.y', selec, trans, ';']);
[ss, ind] = max(size(y));
if ind == 2, x = x.'; end
num = get(handles.popSel, 'Value');

[strings,yres]= kv_autofit(handles.Script{num}, x, real(y), handles.range.pnts);
if strcmp(selec, '(:, :)'), sel = ''; else sel = selec; end
eval(['handles.sim.y', sel,'= yres',trans,';']);
try
    set(handles.list, 'String', strings);
catch
    set(handles.list, 'String', strings, 'Value', 1);
end
list_Callback(h, [], handles);

handles.Script{num} = strings;

guidata(handles.figure1, handles);
plothis(handles);

%--------------------------------------------------------------------
function butFittAll_Callback(h, eventdata, handles)
hand = guidata(handles.hh);
% sliderval = get(hand.sl2Dplot, 'Value');
[prj, selec] = getslider_kazan(hand);

switch hand.Projection
case 2
    x = handles.src.ax.y;
    y = real(handles.src.y)';
case 1
    x = handles.src.ax.x;
    y = real(handles.src.y);
end

numy = size(handles.src.y, hand.Projection);
switch handles.loadtype
case 'onebyone'
    for i = 1:numy
        set(handles.popSel, 'Value', i);
        set(handles.list, 'String', handles.Script{i});
        eval(['y = handles.src.y', str, ';']);
        [ss, ind] = max(size(y));
        if ind == 2, x = x.'; end
        [yres script] = autofitt(handles, x, real(y), []);
        eval(['handles.sim.y', str,'= yres;']);
        set(handles.list, 'String', script);
        handles.Script{i} = script;
    end
case 'allinone'
    %%%%%%%% construct fitting function %%%%%%%
    strings = get(handles.list, 'String');
    
    [newstrings, handles.sim.y] = kv_autofit(strings, x, y, handles.range.pnts);
    
    if hand.Projection==2, handles.sim.y = handles.sim.y'; end
    
    set(handles.list, 'String', newstrings);
    handles.Script{1} = strings;
end

guidata(handles.figure1, handles);
plothis(handles);

set(handles.popSel, 'Value', 1);
popSel_Callback(handles.popSel, [], handles);
    %--------------------------------------------------------------------
function evallist(handles)
str = get(handles.list, 'String');
val = 0;
hand = guidata(handles.hh);
FitRng = [];
% AlSi 02.12.04
[prj, selec] = getslider_kazan(hand);
eval(['x = handles.src.ax.', lower(prj), ';']);
eval(['y = handles.src.y', selec, ';']);

[ss, ind] = max(size(y));
if ind == 2, x = x.'; end
for count = 1:size(str, 1)
    if ~strcmp(str{count}(1:3), 'f =')
        eval([str{count}, ';']);
    else
        val = count;
    end
end


% pnts = x*0;
handles.range.pnts = getrange(FitRng, length(x));
handles.range.bracket = FitRng;
% if ~isempty(FitRng)
%     for i = 1:size(FitRng, 1)
%         pnts([FitRng(i, 1):min(FitRng(i, 2), end)]) = 1;
%     end
%     handles.range.pnts = find(pnts);
%     handles.range.bracket = FitRng;
% end

if ~val, disp('EVALLIST: Can not find function'); return; end
if findstr(str{val}, 'polyfit'), 
    butFitt_Callback(handles.butFitt, [], handles)
else
    eval([str{val}, ';']);
    if hand.PlotType~=1,
        switch hand.Projection
            case 1
                handles.sim.y = f(:, ones(size(handles.src.y, 2), 1));
            case 2
                handles.sim.y = f(ones(size(handles.src.y, 1), 1), :);
        end
    else
        eval(['handles.sim.y', selec, ' = f;']);
    end
    guidata(handles.figure1, handles);
    plothis(handles);
end

%--------------------------------------------------------------------
function mSimDif_Callback(h, eventdata, handles)
states = {'off', 'on'};
st = get(handles.mSimDif, 'Checked');
check = find(strcmp(states, st))-1;

set(handles.mSimDif, 'Checked', states{~check + 1});
guidata(handles.figure1, handles);
plothis(handles);

%--------------------------------------------------------------------
function mSimFFunc_Callback(h, eventdata, handles)
Res = get(handles.list, 'String');
val = get(handles.list, 'Value');


fittingbox_func(handles);
uiwait(handles.figure1);
str = get(handles.list, 'UserData');
if isempty(str), return; end
%%%% find strings with additional parameters %%%
for count = 1:length(Res)
    if length(Res{count})>6,
        if strcmp(Res{count}(1:6), 'FitRng')
            str{end+1} = Res{count};
        end
    end
end

set(handles.list, 'String', str, 'Value', 1);
list_Callback(handles.list, [], handles);

% --------------------------------------------------------------------
function mSimAgr_Callback(h, eventdata, handles)
str = {'off', 'on'};
stat = strcmp(get(handles.mSimAgr, 'Checked'), 'on');
set(handles.mSimAgr, 'Checked', str{~stat + 1});
handles.process = ~stat;
guidata(handles.figure1, handles);
plothis(handles);

% --------------------------------------------------------------------
function mSimAddRng_Callback(h, eventdata, handles)
str = get(handles.list, 'String');
chkrng = 0;
for count = 1:length(str)
    if length(str{count})<6, continue; end
    chkrng = strcmp(str{count}(1:6), 'FitRng') + chkrng;
end
hand = guidata(handles.hh);
[prj, sel] = getslider_kazan(hand);
if isfield(handles, 'src'),
    eval(['numends = num2str(length(handles.src.ax.',lower(prj),'));']);
else
    numends  = '1';
end
if ~chkrng, 
    str{end + 1} = ['FitRng(1, 1) = 1'];
    str{end + 1} = ['FitRng(1, 2) = ', numends];
    for ccc = 1:size(handles.Script, 2)
        handles.Script{ccc}{end+1} = ['FitRng(1, 1) = 1'];
        handles.Script{ccc}{end+1} = ['FitRng(1, 2) = ', numends];
    end
else
    str{end + 1} = 'FitRng(end+1, 1) = 1';
    str{end + 1} = ['FitRng(end, 2) = ', numends];
    for ccc = 1:size(handles.Script, 2)
        handles.Script{ccc}{end+1} = ['FitRng(end+1, 1) = 1'];
        handles.Script{ccc}{end+1} = ['FitRng(end, 2) = ', numends];
    end
end
guidata(handles.figure1, handles);
set(handles.list, 'String', str);
evallist(handles);
% --------------------------------------------------------------------
function mSimShowBds_Callback(h, eventdata, handles)
handles = guidata(handles.figure1);
if ~handles.range.bracket, disp('no range settings'); return; end
str = {'off', 'on'};
stat = get(handles.mSimShowBds, 'Checked');
num = find(strcmp(str, stat))-1;
set(handles.mSimShowBds, 'Checked', str{~num+1});
handles.range.showbnds = ~num;
guidata(handles.figure1, handles);
plothis(handles);

% --------------------------------------------------------------------
function mSimDelRng_Callback(h, eventdata, handles)
if isempty(handles.range.bracket), disp('nothing to delete'); return; end

list  = get(handles.list, 'String');
num  = get(handles.list, 'Value');
count = [];
FitRng = [];
% find strings with 'FitRng'
for i = 1:length(list)
    if length(list{i})>6,
        if strcmp(list{i}(1:6), 'FitRng'),
            eval([list{i}, ';']);
            count(end+1)=i;
        end
    end
end
if isempty(FitRng), disp('nothing to delete'); return; end
pos = num - count(1); % <0 means selection not in a 'FitRng' string

%if (length(count) == 2)|(pos<0),
    set(handles.list, 'String', list(1:end-2), 'Value', 1);
    list_Callback(h, [], guidata(handles.figure1));
    for ccc = 1:size(handles.Script, 2)
        scr{ccc} = handles.Script{ccc}(1:end-2);
    end
    handles.Script = scr;
    
    handles.range.pnts = [];
    handles.range.bracket = [];
    %/alsi 14:03:2004/
    %i have no idea how to do it beter, so i did in this way:
    if length(count) >2,  
        hand = guidata(handles.hh);
        [prj, selec] = getslider_kazan(hand);
        eval(['lenx = length(handles.src.ax.', prj,');']);
        handles.range.pnts = getrange(FitRng([1:end-1], :), lenx);
        handles.range.bracket = FitRng([1:end-1], :);
    end
    %else
    
    %end
guidata(handles.figure1, handles);
plothis(handles);
% --------------------------------------------------------------------
function points = getrange(FitRng, numpnts)
pnts = [1:numpnts]*0;
if FitRng
    for i = 1:size(FitRng, 1)
        pnts([min(FitRng(i, 1), end):min(FitRng(i, 2), end)]) = 1;
    end
    points = find(pnts);
else
    points = [];    
end



% --------------------------------------------------------------------
function varargout = popup_Callback(h, eventdata, handles, varargin)
% --------------------------------------------------------------------
function varargout = but1Step_Callback(h, eventdata, handles, varargin)
% --------------------------------------------------------------------

function [prj, sel, trans] = getslider_kazan(hand)
str = {'X', 'Y'};
trans = '';
prj = str{hand.Projection};
if hand.PlotType ==1
    switch hand.Projection
        case 1
            sel = ['(:, ','min(',  num2str(hand.Selection),', end))'];
        case 2
            sel = ['(min(', num2str(hand.Selection),', end), :)'];
            trans = '''';
    end
else
    sel = '(:, :)';
end
         
