% function varargout=kv_brukerwrite(filename, src, varargin)
% arguments 
%    format    double/float 
function varargout=kv_d01write(filename, src, varargin)

opt = [];
if nargin > 2,
    if ~mod(nargin-2,2)
        for kk=1:2:nargin-3
            opt=setfield(ax, lower(varargin{kk}), varargin{kk+1});    
        end
    else, error('Wrong amount of arguments')
    end
end
if(~isfield(src, 'dsc')) src.dsc = []; end
[path,name,ext] = fileparts(filename);
fname = fullfile(path,[name,'.DTA']);
dscname = fullfile(path,[name,'.DSC']);

BSEQ = safeget(src.dsc, 'BSEQ', 'BIG');

if strcmp(BSEQ,'BIG'), ByteOrder = 'ieee-be';
else, ByteOrder = 'ieee-le';
end
switch safeget(src.dsc,'IRFMT','D')
case 'I',Format = 'int32';
otherwise, Format = 'float64';
end

Dims = size(src.y);
Complex = safeget(src.ax, 'complex', 0);

% open data file
[fid, ErrorMessage] = fopen(fname,'wb',ByteOrder);
error(ErrorMessage);
% calculate expected number of elements and read in
N = prod(Dims);

% reshape to matrix and permute dimensions if wanted
out = reshape(src.y, [1,N]);

% convert to complex
if Complex
    out = reshape([real(out);imag(out)], [2*N,1]);
end

effN = fwrite(fid,out,Format);
if effN<N
    error('Unable to write all expected data.');
end

% close file
St = fclose(fid);
if St<0, error('Unable to close data file.'); end

Dims(end+1:3) = 1;
if Dims(1) > 1, XTYP = 'IDX'; else XTYP = 'NODATA'; end;
if Dims(2) > 1, YTYP = 'IDX'; else YTYP = 'NODATA'; end;
if Dims(3) > 1, ZTYP = 'IDX'; else ZTYP = 'NODATA'; end;
if Complex > 0, IKKF = 'CPLX'; else IKKF = 'REAL'; end;
    
fid = fopen(char(dscname), 'w');
fprintf(fid, '#DESC	1.2 * DESCRIPTOR INFORMATION ***********************\n');
fprintf(fid, '*\n');
fprintf(fid, '*	Dataset Type and Format:\n');
fprintf(fid, '* \n');
fprintf(fid, 'DSRC %s\n', safeget(src.dsc, 'DSRC', 'EXP'));
fprintf(fid, 'BSEQ %s\n', safeget(src.dsc, 'BSEQ', BSEQ));
fprintf(fid, 'IKKF %s\n', IKKF);
fprintf(fid, 'XTYP %s\n', XTYP);
fprintf(fid, 'YTYP %s\n', YTYP);
fprintf(fid, 'ZTYP %s\n', ZTYP);

fprintf(fid, '*\n');
fprintf(fid, '*	Item Formats:\n');
fprintf(fid, '* \n');
fprintf(fid, 'IRFMT	D\n');
fprintf(fid, 'IIFMT	D\n'); 
fprintf(fid, '*\n'); 
fprintf(fid, '*	Data Ranges and Resolutions:\n'); 
fprintf(fid, '* \n'); 
fprintf(fid, 'XPTS %d\n', Dims(1));
fprintf(fid, 'XMIN %f\n', min(src.ax.x));
fprintf(fid, 'XWID %f\n', max(src.ax.x) - min(src.ax.x));
if Dims(2) > 1
    fprintf(fid, 'YPTS %d\n', Dims(2));
    fprintf(fid, 'YMIN %f\n', min(src.ax.y));
    fprintf(fid, 'YWID %f\n', max(src.ax.y) - min(src.ax.y));
end

fprintf(fid, '*\n'); 
fprintf(fid, '*	Documentational Text:\n'); 
fprintf(fid, '* \n'); 
% strip ' symbols 
title  = src.ax.title(src.ax.title~='''');
fprintf(fid, 'TITL ''%s''\n', title); 
fprintf(fid, 'IRNAM	''%s''\n','Intensity'); 
fprintf(fid, 'IINAM	''%s''\n','Intensity' );
lb = src.ax.xlabel;
pos = findstr(lb,',');
fprintf(fid, 'XNAM	''%s''\n', lb(1:pos-1)); 
fprintf(fid, 'IRUNI	''%s''\n',''); 
fprintf(fid, 'IIUNI	''%s''\n',''); 
uni = lb(pos+1:end);
fprintf(fid, 'XUNI	''%s''\n',uni(uni~=' ')); 
if Dims(2) > 1
    fprintf(fid, 'YNAM	%s\n', src.ax.ylabel); 
    fprintf(fid, 'YUNI	%s\n',''); 
end
fprintf(fid, '*\n');
fprintf(fid, '************************************************************\n');
fprintf(fid, '*\n');
fprintf(fid, '#SPL	1.2 * STANDARD PARAMETER LAYER\n');
fprintf(fid, '*\n');
fprintf(fid, 'OPER    KazanViewer\n');
fprintf(fid, 'DATE    %s\n', datestr(date,'dd/mm/yy'));
fprintf(fid, 'TIME    %s\n', datestr(now,'HH:MM:SS'));
fprintf(fid, 'CMNT    \n');
% fprintf(fid, 'SAMP    SoxB, LBZ-BE-002-04, glycerol sealed\n');
% fprintf(fid, 'SFOR    \n');
% fprintf(fid, 'STAG    A\n');
% fprintf(fid, 'EXPT    CW\n');
% fprintf(fid, 'OXS1    IADC\n');
% fprintf(fid, 'AXS1    B0VL\n');
% fprintf(fid, 'AXS2    NONE\n');
% fprintf(fid, 'AXS3    \n');
% fprintf(fid, 'A1CT    0.71\n');
% fprintf(fid, 'A1SW    1.4\n');
fprintf(fid, 'MWFQ    %g\n', safeget(src.ax, 'freq1', 0));
% fprintf(fid, 'MWPW    0.06331\n');
% fprintf(fid, 'AVGS    2\n');
% fprintf(fid, 'RESO    DM9509\n');
% fprintf(fid, 'SPTP    0.08192\n');
% fprintf(fid, 'RCAG    60\n');
% fprintf(fid, 'RCHM    1\n');
% fprintf(fid, 'B0MA    0.001\n');
% fprintf(fid, 'B0MF    100000\n');
% fprintf(fid, 'RCPH    0.0\n');
% fprintf(fid, 'RCOF    -6.0\n');
% fprintf(fid, 'A1RS    8192\n');
% fprintf(fid, 'RCTC    0.08192\n');
% fprintf(fid, 'STMP    9.99 \n');

fprintf(fid, '*  Generated by Kazan Viewer\n'); 

fclose(fid);
